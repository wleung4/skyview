/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _scripts_airport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/airport.js */ \"./src/scripts/airport.js\");\n/* harmony import */ var _scripts_flight_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/flight.js */ \"./src/scripts/flight.js\");\n/* harmony import */ var _scripts_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/map.js */ \"./src/scripts/map.js\");\n\n\n\n\nconst searchForm = document.querySelector(\".home-search\");\nconst searchValue = document.getElementById(\"search\");\nconst flightTable = document.getElementById(\"flight-table\");\nconst mainPage = document.querySelector(\".main-page\");\nconst background = document.querySelector(\"#background\");\nlet departures;\nlet arrivals;\nlet locations;\nlet timer = null;\nsearchValue.addEventListener(\"keyup\", async e => {\n  clearTimeout(timer);\n  timer = setTimeout(async () => {\n    const matches = await (0,_scripts_airport_js__WEBPACK_IMPORTED_MODULE_1__.search)(searchValue.value);\n    console.log('searched');\n    console.log(matches);\n  }, 750);\n});\nsearchForm.addEventListener(\"submit\", async e => {\n  e.preventDefault();\n  const value = searchValue.value;\n  // airport ICAO\n  if (value === \"\") value = \"N/A\";\n  let airportInfo = await (0,_scripts_airport_js__WEBPACK_IMPORTED_MODULE_1__.getAirportInfo)(value);\n  while (!airportInfo) {\n    airportInfo = await (0,_scripts_airport_js__WEBPACK_IMPORTED_MODULE_1__.getAirportInfo)(value);\n  }\n  const airportICAO = airportInfo[0];\n  const airportLatitude = airportInfo[1];\n  const airportLongitude = airportInfo[2];\n  searchForm.style.display = 'none';\n  mainPage.style.display = \"flex\";\n  background.style.display = \"none\";\n\n  // 1 day = 86400, 1 hr = 3600\n  departures = await (0,_scripts_flight_js__WEBPACK_IMPORTED_MODULE_2__.getAirportDepartures)(airportICAO, (0,_scripts_flight_js__WEBPACK_IMPORTED_MODULE_2__.calculateTime)(4), (0,_scripts_flight_js__WEBPACK_IMPORTED_MODULE_2__.calculateTime)());\n  //console.log(\"Airport Departures from past 4 hrs to now: \", departures);\n\n  // callsign = Plane identifier i.e. DAL767\n  addFlightTable(departures);\n  (0,_scripts_map_js__WEBPACK_IMPORTED_MODULE_3__.addMap)([airportLongitude, airportLatitude], airportICAO);\n  // get arrival aircraft info for past day\n  //arrivals = await getAirportArrivals(airportICAO, calculateTime() - 86400*2, calculateTime());\n  // console.log(\"Airport Arrivals from 2 days ago:\", arrivals);\n\n  // console.log(\"Arrivals: \");\n  // arrivals.forEach(arrival => console.log(`Plane number: ${arrival.callsign}`, `ICAO: ${arrival.icao24}`));\n\n  // console.log(\"Arrivals Aircraft info for past 2 days:\")\n  // for(let i = 0; i < arrivals.length; i++){\n  // \tconst info = await getAircraft(arrivals[i].icao24, calculateTime() - 86400*2, calculateTime());\n  // }\n});\n\nconst addFlightTable = async info => {\n  let table = document.createElement(\"table\");\n  let tableBody = document.createElement(\"tbody\");\n\n  //top column name row\n  const colRow = document.createElement(\"tr\");\n  colRow.classList.add(\"header\");\n  const callsignCol = document.createElement(\"td\");\n  callsignCol.textContent = \"Plane\";\n  const departureTimeCol = document.createElement(\"td\");\n  departureTimeCol.textContent = \"Time Departed\";\n  const departureAirportCol = document.createElement(\"td\");\n  departureAirportCol.textContent = \"From\";\n  const arrivalAirportCol = document.createElement(\"td\");\n  arrivalAirportCol.textContent = \"To\";\n  colRow.appendChild(callsignCol);\n  colRow.appendChild(departureTimeCol);\n  colRow.appendChild(departureAirportCol);\n  colRow.appendChild(arrivalAirportCol);\n  tableBody.appendChild(colRow);\n\n  // actual data\n  for (let i = 0; i < info.length; i++) {\n    const row = document.createElement(\"tr\");\n    const callsign = document.createElement(\"td\");\n    callsign.textContent = info[i].callsign;\n    callsign.classList.add(\"clickable\");\n\n    // allows clickable planes => gets location info about clicked plane\n    callsign.addEventListener(\"click\", async e => {\n      e.stopPropagation();\n      locations = (0,_scripts_flight_js__WEBPACK_IMPORTED_MODULE_2__.getFlightLocation)(info[i].icao24);\n      (0,_scripts_map_js__WEBPACK_IMPORTED_MODULE_3__.drawPath)(locations, callsign.textContent);\n    });\n    const departureTime = document.createElement(\"td\");\n    const date = new Date(info[i].firstSeen * 1000).toString();\n    departureTime.textContent = date.slice(0, 28);\n    const departureAirport = document.createElement(\"td\");\n    departureAirport.textContent = info[i].estDepartureAirport;\n    let arrivalAirport = document.createElement(\"td\");\n    if (info[i].estArrivalAirport === null) {\n      arrivalAirport.textContent = \"TBD\";\n    } else {\n      arrivalAirport.textContent = info[i].estArrivalAirport;\n    }\n    row.appendChild(callsign);\n    row.appendChild(departureTime);\n    row.appendChild(departureAirport);\n    row.appendChild(arrivalAirport);\n    tableBody.appendChild(row);\n  }\n  table.appendChild(tableBody);\n  flightTable.appendChild(table);\n  flightTable.classList.add(\"table-style\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/airport.js":
/*!********************************!*\
  !*** ./src/scripts/airport.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAirportInfo: function() { return /* binding */ getAirportInfo; },\n/* harmony export */   search: function() { return /* binding */ search; }\n/* harmony export */ });\nconst airports = [];\nconst getAirportInfo = async airportName => {\n  // \"country_code\",\"region_name\",\"iata\",\"icao\",\"airport\",\"latitude\",\"longitude\"\n  const res = await fetch('../iata-icao.csv');\n  const data = await res.text();\n  const rows = data.split('\\n').slice(1);\n  rows.forEach(ele => {\n    const row = ele.split(\",\");\n    const country_code = row[0].slice(1, row[0].length - 1);\n    const region_name = row[1].slice(1, row[1].length - 1);\n    const iata = row[2].slice(1, row[2].length - 1);\n    const icao = row[3].slice(1, row[3].length - 1);\n    const airport = row[4].slice(1, row[4].length - 1);\n    const latitude = row[5].slice(1, row[5].length - 1);\n    const longitude = row[6].slice(1, row[6].length - 2);\n    airports.push({\n      airport: airport,\n      country_code: country_code,\n      region_name: region_name,\n      iata: iata,\n      icao: icao,\n      latitude: latitude,\n      longitude: longitude\n    });\n  });\n  // transform array of objects into single object where keys is the airport name\n  const airportObj = airports.reduce((obj, item) => Object.assign(obj, {\n    [item.airport]: item\n  }, {}));\n  //console.log(airportObj); // search for airport using airport name key, can key into\n  if (airportObj[airportName]) {\n    return [airportObj[airportName].icao, airportObj[airportName].latitude, airportObj[airportName].longitude];\n  } else {\n    return undefined;\n  }\n};\nconst search = async input => {\n  await getAirportInfo(input);\n  const results = [];\n  airports.forEach(airportObj => {\n    if (airportObj.airport.toLowerCase().includes(input.toLowerCase())) {\n      if (!results.includes(airportObj.airport)) results.push(airportObj.airport);\n    }\n  });\n  return results;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFBTTtJQUNOLE9BQU9RLFNBQVM7RUFDakI7QUFDRCxDQUFDO0FBRU0sTUFBTUMsTUFBTSxHQUFHLE1BQU1DLEtBQUssSUFBSztFQUNyQyxNQUFNN0IsY0FBYyxDQUFDNkIsS0FBSyxDQUFDO0VBQzNCLE1BQU1DLE9BQU8sR0FBRyxFQUFFO0VBQ2xCL0IsUUFBUSxDQUFDVSxPQUFPLENBQUNZLFVBQVUsSUFBSTtJQUM5QixJQUFHQSxVQUFVLENBQUNKLE9BQU8sQ0FBQ2MsV0FBVyxDQUFDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDSCxLQUFLLENBQUNFLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtNQUNsRSxJQUFHLENBQUNELE9BQU8sQ0FBQ0UsUUFBUSxDQUFDWCxVQUFVLENBQUNKLE9BQU8sQ0FBQyxFQUFFYSxPQUFPLENBQUNWLElBQUksQ0FBQ0MsVUFBVSxDQUFDSixPQUFPLENBQUM7SUFDM0U7RUFDRCxDQUFDLENBQUM7RUFDRixPQUFPYSxPQUFPO0FBQ2YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NreXZpZXcvLi9zcmMvc2NyaXB0cy9haXJwb3J0LmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYWlycG9ydHMgPSBbXTtcbmV4cG9ydCBjb25zdCBnZXRBaXJwb3J0SW5mbyA9IGFzeW5jIChhaXJwb3J0TmFtZSkgPT4ge1xuXHQvLyBcImNvdW50cnlfY29kZVwiLFwicmVnaW9uX25hbWVcIixcImlhdGFcIixcImljYW9cIixcImFpcnBvcnRcIixcImxhdGl0dWRlXCIsXCJsb25naXR1ZGVcIlxuXHRjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnLi4vaWF0YS1pY2FvLmNzdicpO1xuXHRjb25zdCBkYXRhID0gYXdhaXQgcmVzLnRleHQoKTtcblx0Y29uc3Qgcm93cyA9IGRhdGEuc3BsaXQoJ1xcbicpLnNsaWNlKDEpO1xuXG5cdHJvd3MuZm9yRWFjaCgoZWxlKT0+e1xuXHRcdGNvbnN0IHJvdyA9IGVsZS5zcGxpdChcIixcIik7XG5cdFx0Y29uc3QgY291bnRyeV9jb2RlID0gcm93WzBdLnNsaWNlKDEsIHJvd1swXS5sZW5ndGggLSAxKTtcblx0XHRjb25zdCByZWdpb25fbmFtZSA9IHJvd1sxXS5zbGljZSgxLCByb3dbMV0ubGVuZ3RoIC0gMSk7XG5cdFx0Y29uc3QgaWF0YSA9IHJvd1syXS5zbGljZSgxLCByb3dbMl0ubGVuZ3RoIC0gMSk7XG5cdFx0Y29uc3QgaWNhbyA9IHJvd1szXS5zbGljZSgxLCByb3dbM10ubGVuZ3RoIC0gMSk7XG5cdFx0Y29uc3QgYWlycG9ydCA9IHJvd1s0XS5zbGljZSgxLCByb3dbNF0ubGVuZ3RoIC0gMSk7XG5cdFx0Y29uc3QgbGF0aXR1ZGUgPSByb3dbNV0uc2xpY2UoMSwgcm93WzVdLmxlbmd0aCAtIDEpO1xuXHRcdGNvbnN0IGxvbmdpdHVkZSA9IHJvd1s2XS5zbGljZSgxLCByb3dbNl0ubGVuZ3RoIC0gMik7XG5cdFx0YWlycG9ydHMucHVzaCh7YWlycG9ydDogYWlycG9ydCxjb3VudHJ5X2NvZGU6IGNvdW50cnlfY29kZSwgcmVnaW9uX25hbWU6IHJlZ2lvbl9uYW1lLCBpYXRhOiBpYXRhLCBcblx0XHRcdGljYW86IGljYW8sIGxhdGl0dWRlOiBsYXRpdHVkZSwgbG9uZ2l0dWRlOiBsb25naXR1ZGV9KTtcblx0fSlcblx0Ly8gdHJhbnNmb3JtIGFycmF5IG9mIG9iamVjdHMgaW50byBzaW5nbGUgb2JqZWN0IHdoZXJlIGtleXMgaXMgdGhlIGFpcnBvcnQgbmFtZVxuXHRjb25zdCBhaXJwb3J0T2JqID0gYWlycG9ydHMucmVkdWNlKChvYmosIGl0ZW0pID0+IE9iamVjdC5hc3NpZ24ob2JqLCB7W2l0ZW0uYWlycG9ydF06aXRlbX0sIHt9KSk7XG5cdC8vY29uc29sZS5sb2coYWlycG9ydE9iaik7IC8vIHNlYXJjaCBmb3IgYWlycG9ydCB1c2luZyBhaXJwb3J0IG5hbWUga2V5LCBjYW4ga2V5IGludG9cblx0aWYgKGFpcnBvcnRPYmpbYWlycG9ydE5hbWVdKSB7XG5cdFx0cmV0dXJuIFthaXJwb3J0T2JqW2FpcnBvcnROYW1lXS5pY2FvLCBhaXJwb3J0T2JqW2FpcnBvcnROYW1lXS5sYXRpdHVkZSwgYWlycG9ydE9ialthaXJwb3J0TmFtZV0ubG9uZ2l0dWRlXTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBzZWFyY2ggPSBhc3luYyhpbnB1dCkgPT4ge1xuXHRhd2FpdCBnZXRBaXJwb3J0SW5mbyhpbnB1dCk7XG5cdGNvbnN0IHJlc3VsdHMgPSBbXTtcblx0YWlycG9ydHMuZm9yRWFjaChhaXJwb3J0T2JqID0+IHtcblx0XHRpZihhaXJwb3J0T2JqLmFpcnBvcnQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhpbnB1dC50b0xvd2VyQ2FzZSgpKSkge1xuXHRcdFx0aWYoIXJlc3VsdHMuaW5jbHVkZXMoYWlycG9ydE9iai5haXJwb3J0KSkgcmVzdWx0cy5wdXNoKGFpcnBvcnRPYmouYWlycG9ydCk7XG5cdFx0fVxuXHR9KVxuXHRyZXR1cm4gcmVzdWx0cztcdFxufVxuXG4iXSwibmFtZXMiOlsiYWlycG9ydHMiLCJnZXRBaXJwb3J0SW5mbyIsImFpcnBvcnROYW1lIiwicmVzIiwiZmV0Y2giLCJkYXRhIiwidGV4dCIsInJvd3MiLCJzcGxpdCIsInNsaWNlIiwiZm9yRWFjaCIsImVsZSIsInJvdyIsImNvdW50cnlfY29kZSIsImxlbmd0aCIsInJlZ2lvbl9uYW1lIiwiaWF0YSIsImljYW8iLCJhaXJwb3J0IiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJwdXNoIiwiYWlycG9ydE9iaiIsInJlZHVjZSIsIm9iaiIsIml0ZW0iLCJPYmplY3QiLCJhc3NpZ24iLCJ1bmRlZmluZWQiLCJzZWFyY2giLCJpbnB1dCIsInJlc3VsdHMiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/airport.js\n");

/***/ }),

/***/ "./src/scripts/flight.js":
/*!*******************************!*\
  !*** ./src/scripts/flight.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateTime: function() { return /* binding */ calculateTime; },\n/* harmony export */   getAircraft: function() { return /* binding */ getAircraft; },\n/* harmony export */   getAirportArrivals: function() { return /* binding */ getAirportArrivals; },\n/* harmony export */   getAirportDepartures: function() { return /* binding */ getAirportDepartures; },\n/* harmony export */   getAllFlights: function() { return /* binding */ getAllFlights; },\n/* harmony export */   getFlightLocation: function() { return /* binding */ getFlightLocation; }\n/* harmony export */ });\nlet allFlights;\nlet arrivalFlights;\nlet departureFlights;\nlet aircraftFlights;\nlet flightLocations;\nconst url = \"https://opensky-network.org/api/flights/\";\n\n// track gives back last reported location of an airplane\nconst getFlightLocation = async function (icao24) {\n  let time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  try {\n    const res = await fetch(`https://opensky-network.org/api/tracks/all?icao24=${icao24}&time=${time}`, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (res.ok) {\n      const data = await res.json();\n      const lastLocation = data.path[data.path.length - 1];\n      // console.log(\"Last reported Latitude:\" , lastLocation[1]);\n      // console.log(\"Last reported Longitude:\" , lastLocation[2]);\n      console.log(data.path);\n      return data.path;\n    } else {\n      throw new Error('response not ok');\n    }\n  } catch (error) {\n    console.error('Error fetching data', error);\n  }\n};\n// Get all flights between time frame < 2 hrs\nconst getAllFlights = async (begin, end) => {\n  // beginning and ending in unix time, seconds since epoch\n  try {\n    const res = await fetch(url + `all?begin=${begin}&end=${end}`, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (res.ok) {\n      const data = await res.json();\n      allFlights = data;\n      return data;\n    } else {\n      throw new Error('response not ok');\n    }\n  } catch (error) {\n    console.error('Error fetching data', error);\n  }\n};\n\n// Get flight information for aircraft departed and arrived within time frame < 30 days, \nconst getAircraft = async (icao24, begin, end) => {\n  try {\n    const res = await fetch(url + `aircraft?icao24=${icao24}&begin=${begin}&end=${end}`, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (res.ok) {\n      const data = await res.json();\n      aircraftFlights = data;\n      return data;\n    } else {\n      throw new Error('response not ok');\n    }\n  } catch (error) {\n    console.error('Error fetching aircraft', error);\n  }\n};\n\n// Get all airport arrivals at specific airport, time frame < 1 week, arrival data from previous day or earlier\nconst getAirportArrivals = async (airport, begin, end) => {\n  try {\n    const res = await fetch(url + `arrival?airport=${airport}&begin=${begin}&end=${end}`, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (res.ok) {\n      const data = await res.json();\n      arrivalFlights = data;\n      return data;\n    } else {\n      throw new Error('response not ok');\n    }\n  } catch (error) {\n    console.error('Error fetching arrivals', error);\n  }\n};\n\n// Get all flight depatures at specific airport, time frame < 1 week, ALWAYS UP TO DATE\nconst getAirportDepartures = async (airport, begin, end) => {\n  try {\n    const res = await fetch(url + `departure?airport=${airport}&begin=${begin}&end=${end}`, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (res.ok) {\n      const data = await res.json();\n      departureFlights = data;\n      return data;\n    } else {\n      throw new Error('response not ok');\n    }\n  } catch (error) {\n    console.error('Error fetching departures', error);\n  }\n};\n\n// convert user input time in hrs\nconst calculateTime = function () {\n  let time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return Math.floor(new Date() / 1000) - time * 3600;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/flight.js\n");

/***/ }),

/***/ "./src/scripts/map.js":
/*!****************************!*\
  !*** ./src/scripts/map.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addMap: function() { return /* binding */ addMap; },\n/* harmony export */   drawPath: function() { return /* binding */ drawPath; }\n/* harmony export */ });\nlet g;\nlet projection;\nlet airportLocation;\nconst addMap = (location, icao) => {\n  const height = 600;\n  const width = 800;\n  const svg = d3.select('#map').append('svg').attr('width', width).attr('height', height);\n  g = svg.append('g');\n  const handleZoom = e => {\n    g.attr('transform', e.transform);\n  };\n  let zoom = d3.zoom().scaleExtent([1, 80]).translateExtent([[0, 0], [width, height]]).on('zoom', handleZoom);\n  svg.call(zoom);\n  projection = d3.geoMercator().center([location[0], location[1]]).translate([width / 2, height / 2]).scale(120);\n  zoom.scaleTo(svg, 20);\n  const path = d3.geoPath().projection(projection);\n  d3.json('https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json').then(data => {\n    const countries = topojson.feature(data, data.objects.countries);\n    const coordinates = projection(location);\n    airportLocation = coordinates;\n    g.selectAll('path').data(countries.features).enter().append('path').attr('d', path);\n    g.selectAll('circle').data(location).enter().append('circle').attr('cx', coordinates[0]).attr('cy', coordinates[1]).attr('r', .25).style('fill', '#000000');\n    g.selectAll('text').data(location).enter().append('text').attr('x', coordinates[0] + .5).attr('y', coordinates[1]).text(icao).style('font-size', '1px');\n  });\n};\nconst drawPath = async (path, plane) => {\n  // [time, latitude, longitude, baro_altitude, true_track, on_ground]\n  const waypoints = await path;\n  const coordinates = [];\n  coordinates.push(airportLocation);\n  waypoints.forEach(waypoint => {\n    coordinates.push(projection([waypoint[2], waypoint[1]]));\n  });\n\n  // path using circles\n  // g.selectAll('circle')\n  // \t.data(coordinates)\n  // \t.enter()\n  // \t.append('circle')\n  // \t.attr('cx', d => d[0])\n  // \t.attr('cy', d => d[1])\n  // \t.attr('r', .1)\n  // \t.style('fill', '#ffffff');\n\n  // path using line\n  const lineGenerator = d3.line().x(d => d[0]).y(d => d[1]);\n  g.append('path').data([coordinates]).attr('fill', 'none').style('stroke', '#000080').style('stroke-width', 0.1).attr('d', lineGenerator);\n  const lastLocation = coordinates[coordinates.length - 1];\n  const lastAngle = waypoints[waypoints.length - 1][4];\n  const landed = waypoints[waypoints.length - 1][5];\n  console.log('last angle', lastAngle);\n  console.log('landed', landed);\n  g.append('image').attr('xlink:href', '../../assets/plane.png').attr('width', 1).attr('height', 1).attr('x', lastLocation[0] - .5).attr('y', lastLocation[1] - .5).attr('transform', `rotate(${lastAngle}, ${lastLocation[0]}, ${lastLocation[1]})`);\n  g.append('text').attr('x', lastLocation[0] + .5).attr('y', lastLocation[1] + .5).text(plane) // `${plane} landed: ${landed}`\n  .style('font-size', '.75px');\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsQ0FBQyxDQUFFLEdBQUUsQ0FBQztFQUVuRnBELENBQUMsQ0FBQ1csTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUNkQyxJQUFJLENBQUMsR0FBRyxFQUFFd0MsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUMvQnhDLElBQUksQ0FBQyxHQUFHLEVBQUV3QyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQy9CWixJQUFJLENBQUNFLEtBQUssQ0FBQyxDQUFDO0VBQUEsQ0FDWkgsS0FBSyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NreXZpZXcvLi9zcmMvc2NyaXB0cy9tYXAuanM/ZjU2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZztcbmxldCBwcm9qZWN0aW9uO1xubGV0IGFpcnBvcnRMb2NhdGlvbjtcbmV4cG9ydCBjb25zdCBhZGRNYXAgPSAobG9jYXRpb24sIGljYW8pID0+IHtcblx0Y29uc3QgaGVpZ2h0ID0gNjAwO1xuXHRjb25zdCB3aWR0aCA9IDgwMDtcblxuXHRjb25zdCBzdmcgPSBkMy5zZWxlY3QoJyNtYXAnKVxuXHRcdC5hcHBlbmQoJ3N2ZycpXG5cdFx0LmF0dHIoJ3dpZHRoJywgd2lkdGgpXG5cdFx0LmF0dHIoJ2hlaWdodCcsIGhlaWdodClcblxuXHRnID0gc3ZnLmFwcGVuZCgnZycpO1xuXHRcblx0Y29uc3QgaGFuZGxlWm9vbSA9IChlKSA9PiB7XG5cdFx0Zy5hdHRyKCd0cmFuc2Zvcm0nLCBlLnRyYW5zZm9ybSk7XG5cdH1cblxuXHRsZXQgem9vbSA9IGQzLnpvb20oKVxuXHRcdC5zY2FsZUV4dGVudChbMSwgODBdKVxuXHRcdC50cmFuc2xhdGVFeHRlbnQoW1swLCAwXSwgW3dpZHRoLCBoZWlnaHRdXSlcblx0XHQub24oJ3pvb20nLCBoYW5kbGVab29tKTtcblx0XG5cdHN2Zy5jYWxsKHpvb20pO1xuXG5cdHByb2plY3Rpb24gPSBkMy5nZW9NZXJjYXRvcigpXG5cdFx0LmNlbnRlcihbbG9jYXRpb25bMF0sIGxvY2F0aW9uWzFdXSlcblx0XHQudHJhbnNsYXRlKFt3aWR0aCAvIDIsIGhlaWdodCAvIDJdKVxuXHRcdC5zY2FsZSgxMjApO1xuXG5cdHpvb20uc2NhbGVUbyhzdmcsIDIwKTtcblx0XG5cdGNvbnN0IHBhdGggPSBkMy5nZW9QYXRoKClcblx0XHQucHJvamVjdGlvbihwcm9qZWN0aW9uKTtcblx0XG5cdGQzLmpzb24oJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vd29ybGQtYXRsYXNAMi9jb3VudHJpZXMtMTEwbS5qc29uJylcblx0XHQudGhlbihkYXRhID0+IHtcblx0XHRcdGNvbnN0IGNvdW50cmllcyA9IHRvcG9qc29uLmZlYXR1cmUoZGF0YSwgZGF0YS5vYmplY3RzLmNvdW50cmllcyk7XG5cdFx0XHRjb25zdCBjb29yZGluYXRlcyA9IHByb2plY3Rpb24obG9jYXRpb24pO1xuXHRcdFx0YWlycG9ydExvY2F0aW9uID0gY29vcmRpbmF0ZXM7XG5cdFx0XHRnLnNlbGVjdEFsbCgncGF0aCcpXG5cdFx0XHRcdC5kYXRhKGNvdW50cmllcy5mZWF0dXJlcylcblx0XHRcdFx0LmVudGVyKClcblx0XHRcdFx0LmFwcGVuZCgncGF0aCcpXG5cdFx0XHRcdC5hdHRyKCdkJywgcGF0aClcblx0XHRcdFxuXHRcdFx0Zy5zZWxlY3RBbGwoJ2NpcmNsZScpXG5cdFx0XHRcdC5kYXRhKGxvY2F0aW9uKVxuXHRcdFx0XHQuZW50ZXIoKVxuXHRcdFx0XHQuYXBwZW5kKCdjaXJjbGUnKVxuXHRcdFx0XHQuYXR0cignY3gnLCBjb29yZGluYXRlc1swXSlcblx0XHRcdFx0LmF0dHIoJ2N5JywgY29vcmRpbmF0ZXNbMV0pXG5cdFx0XHRcdC5hdHRyKCdyJywgLjI1KVxuXHRcdFx0XHQuc3R5bGUoJ2ZpbGwnLCAnIzAwMDAwMCcpO1xuXG5cdFx0XHRnLnNlbGVjdEFsbCgndGV4dCcpXG5cdFx0XHRcdC5kYXRhKGxvY2F0aW9uKVxuXHRcdFx0XHQuZW50ZXIoKVxuXHRcdFx0XHQuYXBwZW5kKCd0ZXh0Jylcblx0XHRcdFx0LmF0dHIoJ3gnLCBjb29yZGluYXRlc1swXSArIC41KVxuXHRcdFx0XHQuYXR0cigneScsIGNvb3JkaW5hdGVzWzFdKVxuXHRcdFx0XHQudGV4dChpY2FvKVxuXHRcdFx0XHQuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxcHgnKTtcblx0XHR9KTtcdFxufVxuXG5leHBvcnQgY29uc3QgZHJhd1BhdGggPSBhc3luYyhwYXRoLCBwbGFuZSkgPT4ge1xuXHQvLyBbdGltZSwgbGF0aXR1ZGUsIGxvbmdpdHVkZSwgYmFyb19hbHRpdHVkZSwgdHJ1ZV90cmFjaywgb25fZ3JvdW5kXVxuXHRjb25zdCB3YXlwb2ludHMgPSBhd2FpdCBwYXRoO1xuXHRjb25zdCBjb29yZGluYXRlcyA9IFtdO1xuXHRjb29yZGluYXRlcy5wdXNoKGFpcnBvcnRMb2NhdGlvbik7XG5cdHdheXBvaW50cy5mb3JFYWNoKCh3YXlwb2ludCkgPT4ge1xuXHRcdGNvb3JkaW5hdGVzLnB1c2gocHJvamVjdGlvbihbd2F5cG9pbnRbMl0sIHdheXBvaW50WzFdXSkpO1xuXHR9KVxuXHRcblx0Ly8gcGF0aCB1c2luZyBjaXJjbGVzXG5cdC8vIGcuc2VsZWN0QWxsKCdjaXJjbGUnKVxuXHQvLyBcdC5kYXRhKGNvb3JkaW5hdGVzKVxuXHQvLyBcdC5lbnRlcigpXG5cdC8vIFx0LmFwcGVuZCgnY2lyY2xlJylcblx0Ly8gXHQuYXR0cignY3gnLCBkID0+IGRbMF0pXG5cdC8vIFx0LmF0dHIoJ2N5JywgZCA9PiBkWzFdKVxuXHQvLyBcdC5hdHRyKCdyJywgLjEpXG5cdC8vIFx0LnN0eWxlKCdmaWxsJywgJyNmZmZmZmYnKTtcblx0XG5cdC8vIHBhdGggdXNpbmcgbGluZVxuXHRjb25zdCBsaW5lR2VuZXJhdG9yID0gZDMubGluZSgpXG5cdFx0LngoZCA9PiBkWzBdKVxuXHRcdC55KGQgPT4gZFsxXSk7XG5cblx0Zy5hcHBlbmQoJ3BhdGgnKVxuXHRcdC5kYXRhKFtjb29yZGluYXRlc10pXG5cdFx0LmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG5cdFx0LnN0eWxlKCdzdHJva2UnLCAnIzAwMDA4MCcpXG5cdFx0LnN0eWxlKCdzdHJva2Utd2lkdGgnLCAwLjEpXG5cdFx0LmF0dHIoJ2QnLCBsaW5lR2VuZXJhdG9yKVxuXG5cdGNvbnN0IGxhc3RMb2NhdGlvbiA9IGNvb3JkaW5hdGVzW2Nvb3JkaW5hdGVzLmxlbmd0aCAtIDFdO1xuXHRjb25zdCBsYXN0QW5nbGUgPSB3YXlwb2ludHNbd2F5cG9pbnRzLmxlbmd0aCAtIDFdWzRdO1xuXHRjb25zdCBsYW5kZWQgPSB3YXlwb2ludHNbd2F5cG9pbnRzLmxlbmd0aCAtIDFdWzVdO1xuXHRjb25zb2xlLmxvZygnbGFzdCBhbmdsZScsIGxhc3RBbmdsZSk7XG5cdGNvbnNvbGUubG9nKCdsYW5kZWQnLCBsYW5kZWQpO1xuXG5cdGcuYXBwZW5kKCdpbWFnZScpXG5cdFx0LmF0dHIoJ3hsaW5rOmhyZWYnLCAnLi4vLi4vYXNzZXRzL3BsYW5lLnBuZycpXG5cdFx0LmF0dHIoJ3dpZHRoJywgMSlcblx0XHQuYXR0cignaGVpZ2h0JywgMSlcblx0XHQuYXR0cigneCcsIGxhc3RMb2NhdGlvblswXSAtIC41KVxuXHRcdC5hdHRyKCd5JywgbGFzdExvY2F0aW9uWzFdIC0gLjUpXG5cdFx0LmF0dHIoJ3RyYW5zZm9ybScsIGByb3RhdGUoJHtsYXN0QW5nbGV9LCAke2xhc3RMb2NhdGlvblswXX0sICR7bGFzdExvY2F0aW9uWzFdfSlgKTtcblx0XG5cdGcuYXBwZW5kKCd0ZXh0Jylcblx0XHQuYXR0cigneCcsIGxhc3RMb2NhdGlvblswXSArIC41KVxuXHRcdC5hdHRyKCd5JywgbGFzdExvY2F0aW9uWzFdICsgLjUpXG5cdFx0LnRleHQocGxhbmUpIC8vIGAke3BsYW5lfSBsYW5kZWQ6ICR7bGFuZGVkfWBcblx0XHQuc3R5bGUoJ2ZvbnQtc2l6ZScsICcuNzVweCcpO1xufSJdLCJuYW1lcyI6WyJnIiwicHJvamVjdGlvbiIsImFpcnBvcnRMb2NhdGlvbiIsImFkZE1hcCIsImxvY2F0aW9uIiwiaWNhbyIsImhlaWdodCIsIndpZHRoIiwic3ZnIiwiZDMiLCJzZWxlY3QiLCJhcHBlbmQiLCJhdHRyIiwiaGFuZGxlWm9vbSIsImUiLCJ0cmFuc2Zvcm0iLCJ6b29tIiwic2NhbGVFeHRlbnQiLCJ0cmFuc2xhdGVFeHRlbnQiLCJvbiIsImNhbGwiLCJnZW9NZXJjYXRvciIsImNlbnRlciIsInRyYW5zbGF0ZSIsInNjYWxlIiwic2NhbGVUbyIsInBhdGgiLCJnZW9QYXRoIiwianNvbiIsInRoZW4iLCJkYXRhIiwiY291bnRyaWVzIiwidG9wb2pzb24iLCJmZWF0dXJlIiwib2JqZWN0cyIsImNvb3JkaW5hdGVzIiwic2VsZWN0QWxsIiwiZmVhdHVyZXMiLCJlbnRlciIsInN0eWxlIiwidGV4dCIsImRyYXdQYXRoIiwicGxhbmUiLCJ3YXlwb2ludHMiLCJwdXNoIiwiZm9yRWFjaCIsIndheXBvaW50IiwibGluZUdlbmVyYXRvciIsImxpbmUiLCJ4IiwiZCIsInkiLCJsYXN0TG9jYXRpb24iLCJsZW5ndGgiLCJsYXN0QW5nbGUiLCJsYW5kZWQiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/map.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9za3l2aWV3Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ (function(module) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next mehtod, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;